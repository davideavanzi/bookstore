---
swagger: "2.0"
info:
  description: "Bookstore - Hypermedia applications project \n"
  version: "1.0.0"
  title: "Bookstore"
  contact:
    email: "davide@avanzi.dev"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v2"
tags:
- name: "book"
  description: "Operations on books"
- name: "cart"
  description: "Operations on cart"
- name: "user"
  description: "Operations on users"
- name: "review"
  description: "Operation on reviews"
- name: "author"
  description: "Operation on authors"
- name: "reservation"
  description: "Operation on reservations"
- name: "interview"
  description: "Operation on interview"
- name: "theme"
  description: "Operation on theme"
- name: "genre"
  description: "Operation on genre"

schemes:
- "https"
- "http"
paths:
  /books:
    get:
      tags:
      - "book"
      summary: "All books, optionally filtered"
      description: "List of books inserted books"
      operationId: "getBooks"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20, max is 500."
        required: false
        type: "integer"
      - name: "authorId"
        in: "query"
        description: "Id of the author to filter books"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        404:
          description: "Not found"
      x-swagger-router-controller: "Book"
    post:
      tags:
      - "book"
      summary: "Add a new book"
      description: "Insert new book in the system - this can only be done by the logged\
        \ in ADMIN."
      operationId: "addBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The book object that needs to be added to the bookstore"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "Books added"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
      x-swagger-router-controller: "Book"
  /books/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the book to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid input"
        404:
          description: "Not found"
      x-swagger-router-controller: "Book"
    put:
      tags:
      - "book"
      summary: "Update a specific book"
      description: "Update values of a book - this can only be done by the logged\
        \ in ADMIN."
      operationId: "updateBook"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "id of the book that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated book object"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "Book updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Book"
    delete:
      tags:
      - "book"
      summary: "Delete a specific book"
      description: "Delete a book - this can only be done by the logged in ADMIN."
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "The id of the book that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Book deleted"
        400:
          description: "Invalid input"
        403:
          description: "forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Book"
  /review:
    get:
      tags:
      - "review"
      summary: "All reviews, optionally filtered"
      description: "List of reviews"
      operationId: "getReviews"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20, max is 500."
        required: false
        type: "integer"
      - name: "userId"
        in: "query"
        description: "Id of the user that made the review"
        required: false
        type: "integer"
      - name: "bookId"
        in: "query"
        description: "Id of the book to get reviews"
        required: false
        type: "integer"
      responses:
        200:
          description: "List of reviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        404:
          description: "Not found"
      x-swagger-router-controller: "Review"
    post:
      tags:
      - "review"
      summary: "Add a new review"
      description: "Insert a new review in the system - this can only be done by logged\
        \ users."
      operationId: "addReview"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The review object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "Review added"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Review"
  /review/{reviewId}:
    get:
      tags:
      - "review"
      summary: "Find review by ID"
      description: "Returns a review"
      operationId: "getReviewById"
      produces:
      - "application/json"
      parameters:
      - name: "reviewId"
        in: "path"
        description: "ID of the review to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Review"
        400:
          description: "Invalid input"
        404:
          description: "Not found"
      x-swagger-router-controller: "Review"
    put:
      tags:
      - "review"
      summary: "Update a specific review"
      description: "Update values of a review - this can only be done by the logged\
        \ in ADMIN or the user that made it."
      operationId: "updateReview"
      produces:
      - "application/json"
      parameters:
      - name: "reviewId"
        in: "path"
        description: "id of the review that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated review object"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "Review updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Review"
    delete:
      tags:
      - "review"
      summary: "Delete a specific review"
      description: "Delete a review - this can only be done by the logged in ADMIN\
        \ or the user that made it."
      operationId: "deleteReview"
      produces:
      - "application/json"
      parameters:
      - name: "reviewId"
        in: "path"
        description: "The id of the review that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Review deleted"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Review"
  
  /event:
    get:
      tags:
      - "event"
      summary: "All events, optionally filtered"
      description: "List of events"
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20, max is 500."
        required: false
        type: "integer"
      - name: "bookId"
        in: "query"
        description: "Id of the presented book on the event"
        required: false
        type: "integer"
      responses:
        200:
          description: "List of events"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        404:
          description: "Not found"
      x-swagger-router-controller: "Event"
    post:
      tags:
      - "event"
      summary: "Add a new event"
      description: "Insert a new event in the system - this can only be done by logged users."
      operationId: "addEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The review object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        200:
          description: "Event added"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Event"
  /event/{eventId}:
    get:
      tags:
      - "event"
      summary: "Find event by ID"
      description: "Returns a event"
      operationId: "getEventById"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of the event to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid input"
        404:
          description: "Not found"
      x-swagger-router-controller: "Event"
    put:
      tags:
      - "event"
      summary: "Update a specific event"
      description: "Update values of a review - this can only be done by the logged in ADMIN or the user that made it."
      operationId: "updateEvent"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "id of the event that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated event object"
        required: true
        schema:
          $ref: "#/definitions/Event"
      responses:
        200:
          description: "Event updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Event"
    delete:
      tags:
      - "event"
      summary: "Delete a specific event"
      description: "Delete a event - this can only be done by the logged in ADMIN or the user that made it."
      operationId: "deleteEvent"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "The id of the event that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Event deleted"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Event"    
  /author:
    get:
      tags:
      - "author"
      summary: "All authors, optionally filtered"
      description: "List of authors"
      operationId: "getAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20, max is 500."
        required: false
        type: "integer"
      - name: "authorId"
        in: "query"
        description: "Id of the author to filter books"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "List of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        404:
          description: "Not found"
      x-swagger-router-controller: "Author"
    post:
      tags:
      - "author"
      summary: "Add a new author"
      description: "Insert new author in the system - this can only be done by the\
        \ logged in ADMIN."
      operationId: "addAuthor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The author object that needs to be added to the bookstore"
        required: true
        schema:
          $ref: "#/definitions/Author"
      responses:
        200:
          description: "Author added"
        403:
          description: "Fobidden"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Author"
  /author/{authorId}:
    get:
      tags:
      - "author"
      summary: "Find author by ID"
      description: "Returns an author"
      operationId: "getAuthorById"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        description: "ID of the author to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        400:
          description: "Invalid input"
        404:
          description: "Author not found"
      x-swagger-router-controller: "Author"
    put:
      tags:
      - "author"
      summary: "Update a specific author"
      description: "Update values of an author - this can only be done by the logged in ADMIN."
      operationId: "updateAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        description: "id of the author that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated author object"
        required: true
        schema:
          $ref: "#/definitions/Author"
      responses:
        200:
          description: "Author updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Author not found"
      x-swagger-router-controller: "Author"
    delete:
      tags:
      - "author"
      summary: "Delete a specific author"
      description: "Delete a author - this can only be done by the logged in ADMIN."
      operationId: "deleteAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "authorId"
        in: "path"
        description: "The id of the author that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Author deleted"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Author"
  /user/register:
    post:
      tags:
      - "user"
      summary: "Register a new user"
      description: "This registers a new user in the store."
      operationId: "registerUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User added"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "User logged in"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id of the user that needs to be fetched."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid input"
        404:
          description: "Not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user that need to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "User deleted"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Nt found"
      x-swagger-router-controller: "User"
  /cart/{cartId}:
    get:
      tags:
      - "cart"
      summary: "Get the content of a cart"
      operationId: "getCartById"
      produces:
      - "application/json"
      parameters:
      - name: "cartId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/Cart"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Cart"
    put:
      tags:
      - "cart"
      summary: "Update an user's cart"
      description: "Update  - this can only be done by the logged in USER (proprietary\
        \ of the cart or by an ADMIN)."
      operationId: "updateCart"
      produces:
      - "application/json"
      parameters:
      - name: "cartId"
        in: "path"
        description: "id of the cart that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated cart object"
        required: true
        schema:
          $ref: "#/definitions/Cart"
      responses:
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Cart"
  /reservation:
    get:
      tags:
      - "reservation"
      summary: "All reservations, optionally filtered"
      description: "List of reservations"
      operationId: "getReservations"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20, max is 500."
        required: false
        type: "integer"
      - name: "userId"
        in: "query"
        description: "Id of the user that made the reservation"
        required: false
        type: "integer"
      - name: "bookId"
        in: "query"
        description: "Id of the book to get reservations"
        required: false
        type: "integer"
      responses:
        200:
          description: "List of reservations"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reservation"
        404:
          description: "Not found"
      x-swagger-router-controller: "Reservation"
    post:
      tags:
      - "reservation"
      summary: "Add a new reservation"
      description: "Insert a new reservation in the system - this can only be done\
        \ by logged users."
      operationId: "addReservation"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The reservation object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Reservation"
      responses:
        200:
          description: "Reservation added"
        403:
          description: "Unauthorized"
        404:
          description: "Not found"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Reservation"
  /reservation/{reservationId}:
    get:
      tags:
      - "reservation"
      summary: "Find reservation by ID"
      description: "Insert get a single reservation in the system - this can only\
        \ be done by logged users or admin."
      operationId: "getReservationById"
      produces:
      - "application/json"
      parameters:
      - name: "reservationId"
        in: "path"
        description: "ID of the reservation to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Reservation"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Reservation"
    put:
      tags:
      - "reservation"
      summary: "Update a specific reservation"
      description: "Update values of a reservation - this can only be done by the\
        \ logged in ADMIN or the user that made it."
      operationId: "updateReservation"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "reservationId"
        in: "path"
        description: "id of the reservation that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "reservationAmount"
        in: "formData"
        description: "Updated reserved book amount"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Reservation updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Reservation"
    delete:
      tags:
      - "reservation"
      summary: "Delete a specific reservation"
      description: "Delete a reservation - this can only be done by the logged in\
        \ ADMIN or the user that made it."
      operationId: "deleteReservation"
      produces:
      - "application/json"
      parameters:
      - name: "reservationId"
        in: "path"
        description: "The id of the reservation that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Reservation deleted"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Reservation"
  /interview:
    get:
      tags:
      - "interview"
      summary: "All interviews, optionally filtered"
      description: "List of interviews"
      operationId: "getInterviews"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20, max is 500."
        required: false
        type: "integer"
      - name: "bookId"
        in: "query"
        description: "Id of the book to get interviews"
        required: false
        type: "integer"
      responses:
        200:
          description: "List of interviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Interview"
        404:
          description: "Not found"
      x-swagger-router-controller: "Interview"
    post:
      tags:
      - "interview"
      summary: "Add a new interview"
      description: "Insert a new interview in the system - this can only be done\
        \ by logged users."
      operationId: "addInterview"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The interview object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Interview"
      responses:
        200:
          description: "Interview added"
        403:
          description: "Unauthorized"
        404:
          description: "Not found"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Interview"
  /interview/{interviewId}:
    get:
      tags:
      - "interview"
      summary: "Find interview by ID"
      description: "Insert get a single reservation in the system - this can only\
        \ be done by logged users or admin."
      operationId: "getInterviewById"
      produces:
      - "application/json"
      parameters:
      - name: "interviewId"
        in: "path"
        description: "ID of the interview to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Interview"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Interview"
    put:
      tags:
      - "interview"
      summary: "Update a specific interview"
      description: "Update values of a interview - this can only be done by the\
        \ logged in ADMIN or the user that made it."
      operationId: "updateInterview"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "interviewId"
        in: "path"
        description: "id of the interview that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Interview updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Interview"
    delete:
      tags:
      - "interview"
      summary: "Delete a specific interview"
      description: "Delete a interview - this can only be done by the logged in\
        \ ADMIN or the user that made it."
      operationId: "deleteInterview"
      produces:
      - "application/json"
      parameters:
      - name: "interviewId"
        in: "path"
        description: "The id of the interview that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Interview deleted"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Interview"
  /theme:
    get:
      tags:
      - "theme"
      summary: "All themes, optionally filtered"
      description: "List of thmes"
      operationId: "getThemes"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Pagination offset. Default is 0"
        required: false
        type: "integer"
      - name: "limit"
        in: "query"
        description: "Maximum number of items per page. Default is 20, max is 500."
        required: false
        type: "integer"
      responses:
        200:
          description: "List of interviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Interview"
        404:
          description: "Not found"
      x-swagger-router-controller: "Interview"
    post:
      tags:
      - "theme"
      summary: "Add a new theme"
      description: "Insert a new interview in the system - this can only be done\
        \ by logged users."
      operationId: "addTheme"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The name object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Theme"
      responses:
        200:
          description: "Theme added"
        403:
          description: "Unauthorized"
        404:
          description: "Not found"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Theme"
  /theme/{themeId}:
    get:
      tags:
      - "theme"
      summary: "Find theme by ID"
      description: "Insert get a single reservation in the system - this can only\
        \ be done by logged users or admin."
      operationId: "getThemeById"
      produces:
      - "application/json"
      parameters:
      - name: "themeId"
        in: "path"
        description: "ID of the theme to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Theme"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Theme"
    put:
      tags:
      - "theme"
      summary: "Update a specific theme"
      description: "Update values of a theme - this can only be done by the\
        \ logged in ADMIN or the user that made it."
      operationId: "updateTheme"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "themeId"
        in: "path"
        description: "id of the theme that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Theme updated"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Theme"
    delete:
      tags:
      - "theme"
      summary: "Delete a specific theme"
      description: "Delete a theme - this can only be done by the logged in\
        \ ADMIN or the user that made it."
      operationId: "deleteTheme"
      produces:
      - "application/json"
      parameters:
      - name: "themeId"
        in: "path"
        description: "The id of the theme that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Theme deleted"
        400:
          description: "Invalid input"
        403:
          description: "Forbidden"
        404:
          description: "Not found"
      x-swagger-router-controller: "Theme"
definitions:
  Book:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      genre:
        type: "array"
        xml:
          name: "genre"
          wrapped: true
        items:
          type: "string"
      photoUrl:
        type: "string"
      price:
        $ref: "#/definitions/Amount"
      abstract:
        type: "string"
      author:
        type: "array"
        xml:
          name: "author"
          wrapped: true
        items:
          $ref: "#/definitions/Author"
    xml:
      name: "Book"
    example:
      photoUrl: "photoUrl"
      price:
        currency: "EUR"
        value: 65.70
      author:
      - name: "name"
        id: 6
      name: "name"
      genre:
      - "genre"
      id: 0
      abstract: "abstract"
  Event:
    type: "object"
    required:
    - "book"
    properties:
      id:
        type: "integer"
        format: "int64"
      bookId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      location:
        type: "string"
      content:
        type: "string"
    xml:
      name: "Event"
  Amount:
    type: "object"
    required:
    - "currency"
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 1000000000000000
      currency:
        $ref: "#/definitions/Currency"
    description: "Price"
    example:
      currency: "EUR"
      value: 65.70
  Currency:
    type: "string"
    pattern: "^[A-Z]{3,3}$"
    description: "currency identifier (3 letters)"
    example: "EUR"
  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Author"
    example:
      name: "name"
      id: 6
  Cart:
    type: "object"
    required:
    - "username"
    properties:
      username:
        type: "string"
      books:
        type: "array"
        xml:
          name: "book"
          wrapped: true
        items:
          $ref: "#/definitions/Book"
    xml:
      name: "Cart"
    example:
      books:
      - photoUrl: "photoUrl"
        price:
          currency: "EUR"
          value: 65.70
        author:
        - name: "name"
          id: 6
        - name: "name"
          id: 6
        name: "name"
        genre:
        - "genre"
        - "genre"
        id: 0
        abstract: "abstract"
      - photoUrl: "photoUrl"
        price:
          currency: "EUR"
          value: 65.70
        author:
        - name: "name"
          id: 6
        - name: "name"
          id: 6
        name: "name"
        genre:
        - "genre"
        - "genre"
        id: 0
        abstract: "abstract"
      username: "username"
  User:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      role:
        type: "string"
        description: "User role"
        default: "USER"
        enum:
        - "USER"
        - "ADMIN"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      role: "USER"
      phone: "phone"
      id: 0
      email: "email"
  Reservation:
    type: "object"
    required:
    - "book"
    - "userId"
    properties:
      book:
        $ref: "#/definitions/Book"
      userId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int64"
    xml:
      name: "Reservation"
    example:
      quantity: 6
      book:
        photoUrl: "photoUrl"
        price:
          currency: "EUR"
          value: 65
        author:
        - name: "name"
          id: 6
        - name: "name"
          id: 6
        name: "name"
        genre:
        - "genre"
        - "genre"
        id: 0
        abstract: "abstract"
      userId: 0
  Review:
    type: "object"
    required:
    - "bookId"
    - "userId"
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      bookId:
        type: "integer"
        format: "int64"
      content:
        type: "string"
        description: "message of the review"
      rate:
        type: "integer"
        format: "int64"
        description: "Stars amount (1-5)"
        enum:
        - 1
        - 2
        - 3
        - 4
        - 5
    xml:
      name: "Review"
    example:
      rate: 5
      id: 0
      content: "content"
      userId: 6
      bookId: 1
  Interview:
    type: "object"
    required:
    - "id"
    - "bookId"
    properties:
      id:
        type: "integer"
        format: "int64"
      bookId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        description: "title of the interview"
      content:
        type: "string"
        description: "message of the interview"
      interviewer:
        type: "string"
        description: "name of the interviewer"
    xml:
      name: "Interview"
    example:
      id: 0
      title: "title"
      content: "content"
      interviewr: "interviewer"
      bookId: 1
  Theme:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        description: "name of the theme"
    xml:
      name: "Interview"
    example:
      id: 0
      name: "name"