swagger: '2.0'
info:
  description: |
    Bookstore - Hypermedia applications project 
  version: 1.0.0
  title: Bookstore
  contact:
    email: davide@avanzi.dev
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: "localhost:8080"
# basePath: /v2
tags:
- name: book
  description: Operations on books
- name: cart
  description: Operations on cart
- name: user
  description: Operations about user
  #externalDocs:
  #  description: Find out more about our store
  #  url: https://avanzi.dev/library
# schemes:
# - http
# - https
paths:
  /books:
    post:
      tags:
      - book
      summary: Add a new book
      description: Insert new book in the system - this can only be done by the logged in ADMIN.
      operationId: addBook
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The book object that needs to be added to the bookstore
        required: true
        schema:
          $ref: '#/definitions/Book'
      responses:
        405:
          description: Invalid input

    get:
      tags:
      - book
      summary: All books, optionally filtered
      description: List of books inserted books
      operationId: GetBooks
      produces:
      - application/json
      parameters:
      - name: offset
        in: query
        description: Pagination offset. Default is 0
        required: false
        type: integer
      - name: limit
        in: query
        description: Maximum number of items per page. Default is 20, max is 500.
        required: false
        type: integer
      #FILTER PARAMETERS
      - name: authorId
        in: query
        description: Id of the author to filter books
        required: false
        type: integer
      responses:
        200:
          description: List of Books
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        404:
          description: Not found
      x-swagger-router-controller: Book

  /books/{bookId}:
    get:
      tags:
      - book
      summary: Find book by ID
      description: Returns a book
      operationId: getBookById
      produces:
      - application/json
      parameters:
      - name: bookId
        in: path
        description: ID of the book to retrieve
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Book'
        400:
          description: Invalid ID
        404:
          description: Book not found
      x-swagger-router-controller: Book
    put:
      tags:
      - book
      summary: Update a specific book
      description: Update values of a book - this can only be done by the logged in ADMIN.
      operationId: updateBook
      produces:
      - application/json
      parameters:
      - name: bookId
        in: path
        description: id of the book that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated book object
        required: true
        schema:
          $ref: '#/definitions/Book'
      responses:
        400:
          description: Invalid bookId supplied
        404:
          description: Book not found
    delete:
      tags:
      - book
      summary: Delete a specific book
      description: Delete a book - this can only be done by the logged in ADMIN.
      operationId: deleteBook
      produces:
      - application/json
      parameters:
      - name: bookId
        in: path
        description: The id of the book that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid bookId supplied
        404:
          description: Book not found
          
  /review:
    post:
      tags:
      - review
      summary: Add a new review
      description: Insert a new review in the system - this can only be done by logged users.
      operationId: addReview
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The review object that needs to be added
        required: true
        schema:
          $ref: '#/definitions/Review'
      responses:
        404:
          description: Book not found
        403:
          description: Unauthorized
        405:
          description: Invalid input
    get:
      tags:
      - review
      summary: All reviews, optionally filtered
      description: List of reviews
      operationId: GetReviews
      produces:
      - application/json
      parameters:
      - name: offset
        in: query
        description: Pagination offset. Default is 0
        required: false
        type: integer
      - name: limit
        in: query
        description: Maximum number of items per page. Default is 20, max is 500.
        required: false
        type: integer
      #FILTER PARAMETERS
      - name: userId
        in: query
        description: Id of the user that made the review
        required: false
        type: integer
      - name: bookId
        in: query
        description: Id of the book to get reviews
        required: false
        type: integer
      responses:
        200:
          description: List of reviews
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        404:
          description: Not found
      x-swagger-router-controller: Review

  /review/{reviewId}:
    get:
      tags:
      - review
      summary: Find review by ID
      description: Returns a review
      operationId: getReviewById
      produces:
      - application/json
      parameters:
      - name: reviewId
        in: path
        description: ID of the review to retrieve
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Review'
        400:
          description: Invalid ID
        404:
          description: Review not found
      x-swagger-router-controller: Review
    put:
      tags:
      - review
      summary: Update a specific review
      description: Update values of a revkew - this can only be done by the logged in ADMIN or the user that made it.
      operationId: updateReview
      produces:
      - application/json
      parameters:
      - name: reviewId
        in: path
        description: id of the review that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated review object
        required: true
        schema:
          $ref: '#/definitions/Review'
      responses:
        400:
          description: Invalid reviewId supplied
        404:
          description: Review not found
        403:
          description: Unauthorized
    delete:
      tags:
      - review
      summary: Delete a specific review
      description: Delete a review - this can only be done by the logged in ADMIN or the user that made it.
      operationId: deleteReview
      produces:
      - application/json
      parameters:
      - name: reviewId
        in: path
        description: The id of the review that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid reviewId supplied
        404:
          description: Review not found
        403:
          description: Unauthorized
      
  /author:
    get:
      tags:
      - author
      summary: All authors, optionally filtered
      description: List of authors
      operationId: GetAuthors
      produces:
      - application/json
      parameters:
      - name: offset
        in: query
        description: Pagination offset. Default is 0
        required: false
        type: integer
      - name: limit
        in: query
        description: Maximum number of items per page. Default is 20, max is 500.
        required: false
        type: integer
      #FILTER PARAMETERS
      - name: authorId
        in: query
        description: Id of the author to filter books
        required: false
        type: integer
      responses:
        200:
          description: List of Books
          schema:
            type: array
            items:
              $ref: '#/definitions/Author'
        404:
          description: Not found
      x-swagger-router-controller: Author
    post:
      tags:
      - author
      summary: Add a new author
      description: Insert new author in the system - this can only be done by the logged in ADMIN.
      operationId: addAuthor
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The author object that needs to be added to the bookstore
        required: true
        schema:
          $ref: '#/definitions/Author'
      responses:
        403:
          description: Unauthorized
        405:
          description: Invalid input
      
  /author/{authorId}:
    get:
      tags:
      - author
      summary: Find author by ID
      description: Returns an author
      operationId: getAuthorById
      produces:
      - application/json
      parameters:
      - name: authorId
        in: path
        description: ID of the author to retrieve
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Author'
        400:
          description: Invalid ID
        404:
          description: Author not found
      x-swagger-router-controller: Author
    put:
      tags:
      - author
      summary: Update a specific author
      description: Update values of an author - this can only be done by the logged in ADMIN.
      operationId: updateAuthor
      produces:
      - application/json
      parameters:
      - name: authorId
        in: path
        description: id of the author that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated author object
        required: true
        schema:
          $ref: '#/definitions/Author'
      responses:
        400:
          description: Invalid author supplied
        403:
          description: Unauthorized
        404:
          description: Author not found
    delete:
      tags:
      - author
      summary: Delete a specific author
      description: Delete a author - this can only be done by the logged in ADMIN.
      operationId: deleteAuthor
      produces:
      - application/json
      parameters:
      - name: authorId
        in: path
        description: The id of the author that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid author supplied
        403:
          description: Unauthorized
        404:
          description: Author not found
      
  /user/register:
    post:
      tags:
      - user
      summary: Register a new user
      description: This registers a new user in the store.
      operationId: registerUser
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: succesfull registration
        404:
          description: unauthorized
      x-swagger-router-controller: User
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: "succesfull login"
        404:
          description: "unauthorized"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user id
      operationId: getUserById
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The id that needs to be fetched. 
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
  /cart/{cartId}:
    get:
      tags:
      - cart
      summary: Get the content of a cart
      operationId: GetCartById
      produces:
      - application/json
      parameters:
      - name: cartId
        in: path
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/Cart"
        403:
          description: unauthorized
        404:
          description: not found
      x-swagger-router-controller: Cart
    put:
      tags:
      - cart
      summary: Update an user's cart
      description: Update  - this can only be done by the logged in USER (proprietary of the cart or by an ADMIN).
      operationId: updateCart
      produces:
      - application/json
      parameters:
      - name: cartId
        in: path
        description: id of the cart that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated cart object
        required: true
        schema:
          $ref: '#/definitions/Cart'
      responses:
        400:
          description: Invalid cartId supplied
        403:
          description: Unauthorized
        404:
          description: Cart not found
    
## DEFINITIONS

definitions:
  Book:
    type: object
    required:
    - name
    properties:
      id:
        type: integer
        format: int64
      name:
       type: string
      genre:  #array of genres
        type: array
        xml:
          name: genre
          wrapped: true
        items:
          type: string
      photoUrl:
        type: string
      price:
        $ref: '#/definitions/Amount'
      abstract:
        type: string
      author:  #array of authors - names
        type: array
        xml:
          name: author
          wrapped: true
        items:
          $ref: '#/definitions/Author'
    xml:
      name: Book
  
  Amount:
    type: object
    required:
    - currency
    - value
    properties:
      value:
        type: number
        format: double
        minimum: 0.01
        maximum: 1000000000000000
      currency:
        $ref: '#/definitions/Currency'
    description: Price
    example:
      currency: EUR
      value: 65.7
      
  Currency:
    type: string
    pattern: '^[A-Z]{3,3}$'
    description: currency identifier (3 letters)
    example: EUR
  
  Author:  #do we need more fields?
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Author
      
  Cart:
    type: object
    required:
    - username
    properties:
      #id or whole object reference?
      username:
        type: string
      books:  #array of books
        type: array
        xml:
          name: book
          wrapped: true
        items:
          $ref: '#/definitions/Book'
    xml:
      name: Cart
  
  User:
    type: object
    required:
      - email
      - password
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      email:  # will be used as username / login credential
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
        description: User role
        enum:
        - USER
        - ADMIN
        default: USER

    xml:
      name: User
      
  Reservation:
    type: object
    required:
    - user
    properties:  #is it better to keep reference of only the id or the whole object?
      #user:  
      #  $ref: '#/definitions/User'
      book:  
        $ref: '#/definitions/Book'
      userId:
        type: integer
        format: int64
    xml:
      name: Reservation
    
  Review: #TODO: do we add a custom message field?
    type: object
    required: 
    - userId
    - bookId
    properties:
      id:
        type: integer
        format: int64
      userId:
        type: integer
        format: int64
      bookId:
        type: integer
        format: int64
      text:
        type: string
        description: message of the review
      rate:
        type: integer
        format: int64
        description: Stars amount (1-5)
        enum:
        - 1
        - 2
        - 3
        - 4
        - 5
    xml:
      name: Review
 
#externalDocs:
#  description: Find out more about Swagger
#  url: http://swagger.io
# Added by API Auto Mocking Plugin
#host: virtserver.swaggerhub.com
# basePath: /fcars/Library/1.0.0
#schemes:
# - https
# - http
# Added by API Auto Mocking Plugin
basePath: /fcars/library/1.0.0
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
schemes:
 - https
 - http

